{
	"info": {
		"_postman_id": "bf52b238-8c2c-4c3b-af8f-8f964d6eb826",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# **Submissions API - Postman Collection Overview**\n\nThis collection allows you to interact with the submissions resource in a Laravel application. Submissions are created through a background job and trigger an event for logging.\n\nEndpoints\n\n- POST /api/submissions - Create a new submission.\n    \n\nRequest Body (POST /api/submissions)\n\n``` json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"message\": \"This is a test message.\"\n}\n\n ```\n\nImportant Notes\n\n- Validation: The API will validate the incoming data and return appropriate error messages if the validation fails.\n    \n- Asynchronous Processing: Submissions are processed asynchronously using a queue. You might need to wait a short time for the data to be saved and the log message to appear.\n    \n- Error Handling: The API will return appropriate error responses (with status codes) for invalid data or internal server errors.\n    \n\nTesting\n\n1. Set up a Laravel environment:\n    \n    - Make sure your Laravel application is running.\n        \n    - Run migrations to create the necessary database tables.\n        \n    - Start a queue worker to process the jobs (`php artisan queue:work`).\n        \n2. Import the Postman collection:\n    \n    - Import the provided Postman collection into your Postman application.\n        \n3. Send Requests:\n    \n    - Use the collection to send requests to the API endpoints.\n        \n    - Observe the responses and verify the behavior matches the expected outcomes.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6050671"
	},
	"item": [
		{
			"name": "Submit Job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "message",
							"value": "{{$randomLoremLines}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/submit",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submit"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/submissions?page=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submissions"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						},
						{
							"key": "page",
							"value": "2"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Show data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/submissions/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submissions",
						"2"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "message",
							"value": "{{$randomLoremLines}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/submissions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submissions"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/submissions/2?name={{$randomFirstName}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submissions",
						"2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{$randomFirstName}}"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/submissions/6",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"submissions",
						"6"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}